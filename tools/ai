#!/usr/bin/env php
<?php
/**
 * tools/ai â€” CLI entry for AI Assistant preview and intent handling.
 * Usage: ai:chat [--provider=] [--model=] [--json] "<input>"
 * Prints preview and summary. No changes are applied.
 */
require_once __DIR__ . '/../src/usr/local/pfSense/include/vendor/autoload.php';
require_once dirname(__DIR__) . '/src/etc/inc/ai_assistant.inc';
require_once dirname(__DIR__) . '/src/etc/inc/ai_rules.inc';
require_once dirname(__DIR__) . '/src/etc/inc/ai_wizards.inc';
require_once dirname(__DIR__) . '/src/etc/inc/ai_apply.inc';

use Symfony\Component\Console\Application;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;

class AiChatCommand extends Command
{
    protected static $defaultName = 'ai:chat';
    protected static $defaultDescription = 'Preview or apply AI Assistant config plan (no changes unless --apply)';

    protected function configure()
    {
        $this
            ->addArgument('input', InputArgument::REQUIRED, 'Natural language request')
            ->addOption('provider', null, InputOption::VALUE_OPTIONAL, 'AI provider')
            ->addOption('model', null, InputOption::VALUE_OPTIONAL, 'AI model')
            ->addOption('json', null, InputOption::VALUE_NONE, 'Output as JSON')
            ->addOption('apply', null, InputOption::VALUE_NONE, 'Apply immediately (confirmation required)')
            ->addOption('force', null, InputOption::VALUE_NONE, 'Force apply even with warnings');
    }

    protected function execute(InputInterface $input, OutputInterface $output)
    {
        $userInput = $input->getArgument('input');
        $providerName = $input->getOption('provider');
        $model = $input->getOption('model');

        $provider = null;
        if ($providerName) {
            $provider = AIProviderFactory::make($providerName);
        }
        if ($model) {
            fwrite(STDERR, "[warning] --model override is not yet supported in CLI mode.\n");
        }

        $assistant = new AIAssistant($provider);
        $result = $assistant->handle_request($userInput);

        $doApply = $input->getOption('apply');
        $force = $input->getOption('force');

        if ($doApply) {
            $applyResult = AIApplyEngine::apply($result['proposal'], [
                'confirm' => true,
                'force' => $force
            ]);
            if ($input->getOption('json')) {
                $output->writeln(json_encode($applyResult, JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES));
            } else {
                $output->writeln($applyResult['applied']
                    ? "<info>Proposal applied successfully.</info>"
                    : "<error>Proposal NOT applied.</error>");
                $output->writeln($applyResult['message'] ?? '');
                if (!empty($applyResult['warnings'])) {
                    $output->writeln("<comment>Warnings:</comment>");
                    foreach ($applyResult['warnings'] as $w) $output->writeln("  - $w");
                }
                if (!empty($applyResult['notes'])) {
                    $output->writeln("<info>Notes:</info>");
                    foreach ($applyResult['notes'] as $n) $output->writeln("  - $n");
                }
                if (!empty($applyResult['reconfigured'])) {
                    $output->writeln("<info>Reconfigured subsystems:</info> " . implode(', ', $applyResult['reconfigured']));
                }
            }
            return Command::SUCCESS;
        }

        if ($input->getOption('json')) {
            $output->writeln(json_encode($result, JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES));
        } else {
            $output->writeln("<info>Explanation:</info>\n" . ($result['proposal']['explanation'] ?? ''));
            $output->writeln("<info>Preview:</info>\n" . ($result['preview']['text'] ?? ''));
            $output->writeln("<info>Diff:</info>\n" . ($result['preview']['diff'] ?? ''));
            if (!empty($result['preview']['impacts'])) {
                $output->writeln("<info>Impacts:</info>");
                foreach ($result['preview']['impacts'] as $impact) {
                    $output->writeln("  - $impact");
                }
            }
            if (!empty($result['preview']['risk_warnings'])) {
                $output->writeln("<comment>Risk Warnings:</comment>");
                foreach ($result['preview']['risk_warnings'] as $warn) {
                    $output->writeln("  - $warn");
                }
            }
            if (!empty($result['clarifying_questions'])) {
                $output->writeln("<question>Clarifying Questions:</question>");
                foreach ($result['clarifying_questions'] as $q) {
                    $output->writeln("  - $q");
                }
            }
            $output->writeln("\n<comment>No changes have been applied. Use --apply to commit changes.</comment>");
        }
        return Command::SUCCESS;
    }
}

/**
 * Command: ai:apply
 * Usage: ai:apply --file=proposal.json [--confirm] [--force] [--json]
 */
class AiApplyCommand extends Command
{
    protected static $defaultName = 'ai:apply';
    protected static $defaultDescription = 'Safely validate and apply a proposal JSON. Default is dry-run; use --confirm to commit.';

    protected function configure()
    {
        $this
            ->addOption('file', null, InputOption::VALUE_OPTIONAL, 'Proposal JSON file (default: stdin)')
            ->addOption('confirm', null, InputOption::VALUE_NONE, 'Apply changes (required to commit)')
            ->addOption('force', null, InputOption::VALUE_NONE, 'Force apply even with validation warnings')
            ->addOption('json', null, InputOption::VALUE_NONE, 'Output as JSON');
    }

    protected function execute(InputInterface $input, OutputInterface $output)
    {
        $file = $input->getOption('file');
        $confirm = $input->getOption('confirm');
        $force = $input->getOption('force');

        $proposal = null;
        if ($file) {
            if (!file_exists($file)) {
                $output->writeln("<error>Proposal file not found: $file</error>");
                return Command::FAILURE;
            }
            $proposal = json_decode(file_get_contents($file), true);
            if (!$proposal) {
                $output->writeln("<error>Could not parse proposal JSON.</error>");
                return Command::FAILURE;
            }
        } else {
            $stdin = stream_get_contents(STDIN);
            $proposal = json_decode($stdin, true);
            if (!$proposal) {
                $output->writeln("<error>Could not parse proposal JSON from stdin.</error>");
                return Command::FAILURE;
            }
        }

        $options = ['confirm' => $confirm, 'force' => $force];
        $result = AIApplyEngine::apply($proposal, $options);

        if ($input->getOption('json')) {
            $output->writeln(json_encode($result, JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES));
        } else {
            if ($result['applied']) {
                $output->writeln("<info>Proposal applied successfully.</info>");
                if (!empty($result['reconfigured'])) {
                    $output->writeln("Reconfigured: " . implode(', ', $result['reconfigured']));
                }
            } else {
                $output->writeln("<comment>Dry run only (no changes applied).</comment>");
                $output->writeln($result['message'] ?? '');
            }
            if (!empty($result['validation']['warnings'])) {
                $output->writeln("<comment>Warnings:</comment>");
                foreach ($result['validation']['warnings'] as $w) $output->writeln("  - $w");
            }
            if (!empty($result['notes'])) {
                $output->writeln("<info>Notes:</info>");
                foreach ($result['notes'] as $n) $output->writeln("  - $n");
            }
        }
        return Command::SUCCESS;
    }
}

$application = new Application();
$application->add(new AiChatCommand());
$application->add(new AiAnalyzeRulesCommand());
$application->add(new AiWizardCommand());
$application->run();

/**
 * Command: ai:analyze-rules
 */
class AiAnalyzeRulesCommand extends Command
{
    protected static $defaultName = 'ai:analyze-rules';
    protected static $defaultDescription = 'Analyze firewall rules and preview AI-suggested improvements.';

    protected function configure()
    {
        $this
            ->addOption('json', null, InputOption::VALUE_NONE, 'Output as JSON');
    }

    protected function execute(InputInterface $input, OutputInterface $output)
    {
        $json = $input->getOption('json');
        $analyzer = new AIRuleAnalyzer();
        $analysis = $analyzer->analyze();
        $report = $analyzer->renderReport($analysis);

        if ($json) {
            $output->writeln(json_encode($report, JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES));
        } else {
            $output->writeln("<info>Rule Analysis Summary:</info>");
            $counts = $report['counts'];
            $output->writeln("  Total rules: " . ($counts['total_rules'] ?? 0));
            $output->writeln("  WAN any-any pass: " . ($counts['wan_pass_any_any'] ?? 0));
            $output->writeln("  Duplicates: " . ($counts['duplicates'] ?? 0));
            $output->writeln("  Shadowed: " . ($counts['shadowed'] ?? 0));
            $output->writeln("  Exposed services: " . ($counts['exposed_services'] ?? 0));
            $output->writeln("");

            $output->writeln(($analysis['summary'] ?? ''));

            $output->writeln("\n<info>Findings:</info>");
            foreach (($report['findings'] ?? []) as $f) {
                $output->writeln("  - [" . strtoupper($f['severity'] ?? '') . "] " . ($f['description'] ?? ''));
            }

            $output->writeln("\n<info>Suggested Preview:</info>");
            $preview = AIPlanRenderer::render_preview($report['proposal']);
            if (!empty($preview['text'])) {
                $output->writeln($preview['text']);
            }
            if (!empty($preview['diff'])) {
                $output->writeln($preview['diff']);
            }

            $output->writeln("\n<comment>No changes have been applied.</comment>");
        }
        return Command::SUCCESS;
    }
}

/**
 * Command: ai:wizard
 */
class AiWizardCommand extends Command
{
    protected static $defaultName = 'ai:wizard';
    protected static $defaultDescription = 'Guided AI wizard for HA, Multi-WAN, or VPN configuration (preview only)';

    protected function configure()
    {
        $this
            ->addArgument('type', InputArgument::REQUIRED, 'Wizard type: ha|multiwan|vpn');
    }

    protected function execute(InputInterface $input, OutputInterface $output)
    {
        $type = strtolower($input->getArgument('type'));
        $valid = ['ha', 'multiwan', 'vpn'];
        if (!in_array($type, $valid)) {
            $output->writeln("<error>Invalid wizard type. Use one of: ha, multiwan, vpn.</error>");
            return Command::FAILURE;
        }

        $helper = $this->getHelper('question');
        $state = [];
        $result = AIWizards::start($type);
        $state = $result['state'];
        $questions = $result['questions'];

        while (true) {
            $answers = [];
            foreach ($questions as $key => $questionText) {
                $q = new \Symfony\Component\Console\Question\Question($questionText . ' ');
                $answers[$key] = $helper->ask($input, $output, $q);
            }
            $result = AIWizards::next($type, $state, $answers);
            $state = $result['state'];
            if (!empty($result['complete'])) {
                break;
            }
            $questions = $result['questions'];
        }

        $proposal = AIWizards::buildProposal($type, $state);
        $output->writeln("\n<info>Proposal Preview:</info>");
        $preview = AIPlanRenderer::render_preview($proposal);
        if (!empty($preview['text'])) {
            $output->writeln($preview['text']);
        }
        if (!empty($preview['diff'])) {
            $output->writeln($preview['diff']);
        }
        if (!empty($proposal['impacts'])) {
            $output->writeln("<info>Impacts:</info>");
            foreach ($proposal['impacts'] as $impact) {
                $output->writeln("  - $impact");
            }
        }
        if (!empty($proposal['risk_warnings'])) {
            $output->writeln("<comment>Risk Warnings:</comment>");
            foreach ($proposal['risk_warnings'] as $warn) {
                $output->writeln("  - $warn");
            }
        }
        $output->writeln("\n<comment>This is a preview only. No changes have been applied.</comment>");
        return Command::SUCCESS;
    }
}